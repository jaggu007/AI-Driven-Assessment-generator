
import { GoogleGenAI, Type } from "@google/genai";
import type { Assessment, Question, QuestionType } from "../types";

const generatePrompt = (topic: string, numQuestions: number, questionType: QuestionType): string => {
  let questionDetails = '';
  switch (questionType) {
    case 'Multiple Choice':
      questionDetails = `Each question should have 4 options. The 'answer' field must be one of the provided options.`;
      break;
    case 'True/False':
      questionDetails = `The 'options' array should be empty. The 'answer' must be either "True" or "False".`;
      break;
    case 'Short Answer':
      questionDetails = `The 'options' array should be empty. Provide a concise, correct answer.`;
      break;
  }

  return `
    Generate an assessment about the topic: "${topic}".
    The assessment must have exactly ${numQuestions} questions.
    The question type is "${questionType}".
    ${questionDetails}
    For every question, provide a brief but clear explanation for the correct answer.
    Your response MUST be a valid JSON array of objects that strictly adheres to the provided schema.
  `;
};

const responseSchema = {
  type: Type.ARRAY,
  items: {
    type: Type.OBJECT,
    properties: {
      question: {
        type: Type.STRING,
        description: "The question text.",
      },
      options: {
        type: Type.ARRAY,
        description: "An array of possible answers. Empty for non-multiple-choice questions.",
        items: {
          type: Type.STRING,
        },
      },
      answer: {
        type: Type.STRING,
        description: "The correct answer to the question.",
      },
      explanation: {
        type: Type.STRING,
        description: "A brief explanation for why the answer is correct.",
      },
    },
    required: ["question", "options", "answer", "explanation"],
  },
};

export const generateAssessment = async (
  topic: string,
  numQuestions: number,
  questionType: QuestionType
): Promise<Assessment> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set.");
  }

  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  const prompt = generatePrompt(topic, numQuestions, questionType);

  const response = await ai.models.generateContent({
    model: "gemini-2.5-flash",
    contents: prompt,
    config: {
      responseMimeType: "application/json",
      responseSchema: responseSchema,
      temperature: 0.7,
    },
  });

  try {
    const jsonText = response.text.trim();
    const questions: Question[] = JSON.parse(jsonText);
    
    if (!Array.isArray(questions) || questions.length === 0) {
      throw new Error("AI returned an invalid or empty assessment.");
    }

    return {
      topic,
      questionType,
      questions,
    };
  } catch (e) {
    console.error("Failed to parse AI response:", response.text);
    throw new Error("Failed to parse the assessment generated by the AI. The response might be malformed.");
  }
};
